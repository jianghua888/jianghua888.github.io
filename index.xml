<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jianghua-我的小站</title>
    <link>http://jianghua888.github.io/</link>
    <description>Recent content on jianghua-我的小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://jianghua888.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【原创】TCP/IP编程之echo(poll版本)</title>
      <link>http://jianghua888.github.io/post/%E5%8E%9F%E5%88%9Btcpip%E7%BC%96%E7%A8%8B%E4%B9%8Bechopoll%E7%89%88%E6%9C%AC/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://jianghua888.github.io/post/%E5%8E%9F%E5%88%9Btcpip%E7%BC%96%E7%A8%8B%E4%B9%8Bechopoll%E7%89%88%E6%9C%AC/</guid>
      <description>服务端代码
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;sys/socket.h&amp;gt; #include &amp;lt;netinet/in.h&amp;gt; #include &amp;lt;arpa/inet.h&amp;gt; #include &amp;lt;assert.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;errno.h&amp;gt; #include &amp;lt;limits.h&amp;gt; #include &amp;lt;poll.h&amp;gt; #define MAX_CONN 10000 int main(int argc, char *argv[]) { //ip和端口 const char *ip = &amp;quot;127.0.0.1&amp;quot;; int port = 8888; //poll pollfd 的结构体数组 struct pollfd client[MAX_CONN]; //初始化socket地址 struct sockaddr_in server_address; bzero(&amp;amp;server_address, sizeof(server_address)); server_address.sin_family = AF_INET; server_address.sin_port = htons(port); inet_pton(AF_INET, ip, &amp;amp;server_address.sin_addr); //创建socket int listenfd = socket(AF_INET, SOCK_STREAM, 0); if(listenfd &amp;lt; 0) { printf(&amp;quot;socket create error.</description>
    </item>
    
    <item>
      <title>【原创】TCP/IP编程之echo(select版本)</title>
      <link>http://jianghua888.github.io/post/%E5%8E%9F%E5%88%9Btcpip%E7%BC%96%E7%A8%8B%E4%B9%8Bechoselect%E7%89%88%E6%9C%AC/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://jianghua888.github.io/post/%E5%8E%9F%E5%88%9Btcpip%E7%BC%96%E7%A8%8B%E4%B9%8Bechoselect%E7%89%88%E6%9C%AC/</guid>
      <description>服务端代码
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;sys/socket.h&amp;gt; #include &amp;lt;netinet/in.h&amp;gt; #include &amp;lt;arpa/inet.h&amp;gt; #include &amp;lt;assert.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;errno.h&amp;gt; int main(int argc, char *argv[]) { //ip和端口 const char *ip = &amp;quot;127.0.0.1&amp;quot;; int port = 8888; //定义fd_set数组 fd_set readfds, allset; fd_set exception_fds; //初始化 FD_ZERO(&amp;amp;readfds); FD_ZERO(&amp;amp;allset); FD_ZERO(&amp;amp;exception_fds); //初始化socket地址 struct sockaddr_in server_address; bzero(&amp;amp;server_address, sizeof(server_address)); server_address.sin_family = AF_INET; server_address.sin_port = htons(port); inet_pton(AF_INET, ip, &amp;amp;server_address.sin_addr); //创建socket int listenfd = socket(AF_INET, SOCK_STREAM, 0); if(listenfd &amp;lt; 0) { printf(&amp;quot;socket create error.</description>
    </item>
    
    <item>
      <title>【原创】TCP/IP编程之echo</title>
      <link>http://jianghua888.github.io/post/%E5%8E%9F%E5%88%9Btcpip%E7%BC%96%E7%A8%8B%E4%B9%8Becho/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://jianghua888.github.io/post/%E5%8E%9F%E5%88%9Btcpip%E7%BC%96%E7%A8%8B%E4%B9%8Becho/</guid>
      <description>客户端代码
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;sys/socket.h&amp;gt; #include &amp;lt;netinet/in.h&amp;gt; #include &amp;lt;arpa/inet.h&amp;gt; #include &amp;lt;assert.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;string.h&amp;gt; int main(int argc, char *argv[]) { const char *ip = &amp;quot;127.0.0.1&amp;quot;; int port = 8888; //初始化socket地址 struct sockaddr_in server_address; bzero(&amp;amp;server_address, sizeof(server_address)); server_address.sin_family = AF_INET; server_address.sin_port = htons(port); inet_pton(AF_INET, ip, &amp;amp;server_address.sin_addr); //创建socket int sockfd = socket(AF_INET, SOCK_STREAM, 0); if(sockfd &amp;lt; 0) { printf(&amp;quot;socket create error.&amp;quot;); return -1; } //connect服务器 if( connect(sockfd, (struct sockaddr *)&amp;amp;server_address, sizeof(server_address)) &amp;lt;0 ) { printf(&amp;quot;connect error.</description>
    </item>
    
    <item>
      <title>【原创】二叉树基础</title>
      <link>http://jianghua888.github.io/post/%E5%8E%9F%E5%88%9B%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://jianghua888.github.io/post/%E5%8E%9F%E5%88%9B%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80/</guid>
      <description>#include&amp;lt;stdio.h&amp;gt; #include&amp;lt;stdlib.h&amp;gt; //定义数据节点 typedef struct Node { char ch; struct Node *leftChildPtr; struct Node *rightChildPtr; }TreeNode,*TreeNodePtr; char *str = &amp;quot;abc##d##ef##g##&amp;quot;; //要创建的节点数据 /** * 创建一课二叉树 */ TreeNodePtr createBinaryTree(char ch) { if(ch == &#39;\0&#39; || ch == &#39;#&#39;) { return NULL; } //如果不是#,则创建一个节点 TreeNodePtr ptr = (TreeNodePtr)malloc(sizeof(TreeNode)); ptr-&amp;gt;ch = ch; str++; //外面指针走一个字符 ptr-&amp;gt;leftChildPtr = createBinaryTree(*str);	str++; ptr-&amp;gt;rightChildPtr = createBinaryTree(*str); return ptr; } /** * 前序遍历 */ void preTraverseTree(TreeNodePtr node) { if(node != NULL) { //std::cout &amp;lt;&amp;lt; node-&amp;gt;ch &amp;lt;&amp;lt; &amp;quot; -- &amp;quot;; printf(&amp;quot;%c&amp;quot;,node-&amp;gt;ch); printf(&amp;quot; -- &amp;quot;); preTraverseTree(node-&amp;gt;leftChildPtr); preTraverseTree(node-&amp;gt;rightChildPtr); }	} /** * 中序遍历 */ void inOrderTraverseTree(TreeNodePtr node) { if(node !</description>
    </item>
    
    <item>
      <title>【原创】环境编程之进程</title>
      <link>http://jianghua888.github.io/post/%E5%8E%9F%E5%88%9B%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://jianghua888.github.io/post/%E5%8E%9F%E5%88%9B%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E7%A8%8B/</guid>
      <description> 【原创总结】环境编程之进程 ​ 进程是我们操作系统相当重要的一个抽象，描述的白话一点，就是我们电脑上正在运行的程序。比如我们正在登陆的电脑微信，它就是一个进程。当我们的微信在没有被计算机加载到内存中去执行的时候，其实就是一堆躺在硬盘上睡大觉的二进制代码，那它的状态就不叫进程，而是叫程序。所以说，进程是一种活动状态，是有生命周期的。下面我们会详细的来说说，进程相关的一些知识。(主要围绕Linux系统展开)
 进程的创建，终止
 进程在内存中的布局
 进程的几种状态
 进程的调度
 进程在内核中的表示
  1. 进程的创建，终止 ​ 在我们的Linux系统中，创建一个进程，需要用到一个系统提供给我们的一个系统调用。（系统调用：就是我们编写的用户程序，是没有权限越过操作系统的内核直接去访问一些资源，比如磁盘上的数据，为了安全和统一管理，提供了一些接口，我们就可以通过这些接口去访问了）一般我们叫syscall. fork() 正是系统提供给我们的主动去创建一个进程的系统调用。 定义如下：
​ pid_t fork(void)
fork没有参数，返回值是pid_t, 是一个非负整数，也就是我们的进程ID。 fork()调用后，返回2次，跟我们平时使用方法不太一样，这里要注意呀。 2种返回结果如下：
pid_t ==0 : 是子进程返回 , pid_t &amp;gt;0 是父进程返回。
思考点，这里为什么返回值等于0是子进程，大于0是父进程呢？
在APUE中，有详细描述。理由是：子进程把进程ID返回给父进程，因为一个父进程可以有多个子进程，没有其他的方式和函数可以获取到子进程的PID号。 而把0返回给子进程呢，则是一个子进程只有一个父进程，子进程可以通过getppid的方式获取到父进程的PID。
当我们调用fork后，子进程比较简单粗暴的拷贝了父进程的东西，比如父进程的数据空间，堆和栈等，但是代码段是共享的。后面在进程的布局当中会详细讲到进程在内存中的一个具体形态。
1.2 进程几种终止的方式
 在main函数中return 调用exit 调用_exit或者_Exit 最后一个子线程return 最后一个子线程调用pthread_exit 调用abort 当进程收到某种信号 最后一个线程对取消请求做出响应  2. 进程在内存中的布局 </description>
    </item>
    
  </channel>
</rss>